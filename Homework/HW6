Part 1:
static int evaluatePostfix(String ex) {
		int ans = 0;
		Stack<Integer> s = new Stack<>();
		for (int i = 0; i < ex.length(); i++) {
			char ch = ex.charAt(i);
			if ('1' <= ch && '9' >= ch) {
				s.push(Integer.parseInt("" + ch));
			} else if (ch == '+') {
				int b = s.pop();
				int a = s.pop();
				s.push(a + b);
			} else if (ch == '-') {
				int b = s.pop();
				int a = s.pop();
				s.push(a - b);
			} else if (ch == '*') {
				int b = s.pop();
				int a = s.pop();
				s.push(a * b);
			} else if (ch == '/') {
				int b = s.pop();
				int a = s.pop();
				s.push(a / b);
			}
			
		}

		return s.pop();
	}

Part 2:
class GenericStack<E> {
	private E[] arr;
	private int last;
	
	public GenericStack() {
		last = -1;
		arr = (E[]) new Object[10];
	}
	
	public int getSize() {
		return last + 1;
	}
	
	public E peek() {
		if (last == -1) return null;
		return arr[last];
	}
	
	public E pop() {
		if (last == -1) return null;
		E e = arr[last--];
		return e;
	}
	
	public void push(E e) {
		if (last + 1 ==  arr.length)
			arr = Arrays.copyOf(arr, arr.length * 2);
		arr[++last] = e; 
	}
	
	public boolean isEmpty() {
		return last == -1;
	}
	
	public String toString() {
		if (last == -1) return "Stack: []";
		String str = "Stack: [";
		for (int i = 0; i < last; i++) {
			str += arr[i] + ", ";
		}
		str += arr[last] + "]";
		return str;
	}
}
